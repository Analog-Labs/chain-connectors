###############################################
##
##    Pipeline for deploying to Kubernetes
##    cluster.
##
##    Gets triggered on each completed run of
##    the Docker build workflow.
##
##    Effectively deletes the pods on the
##    cluster and pulls the latest images
##    again.
##
###############################################

name: Deploy to cluster

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Docker image tag to deploy on the network"
        required: true
        type: string
      environment:
        description: "Target environment where to fetch secrets and vars"
        required: true
        type: choice
        default: "staging"
        options:
          - "staging"
  workflow_run:
    workflows:
      - "deploy"
    types: [completed]
    branches:
    - 'maintenance'

jobs:
  deploy-internal:
    name: Deploy on internal cluster
    runs-on: ubuntu-latest
    # If no input is provided, deploy to staging
    environment: ${{ github.event.inputs.environment || 'staging' }}
    # Deploy gets triggered only on master branch
    steps:
    - name: Checkout
      uses: actions/checkout@v2

      # EKS supports only authentication via IAM roles
      # The AWS cli tool is mandatory
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2
        verbose: false
        arch: amd64
        rootdir: ""
        workdir: ""

      # Make sure to have kubectl and the kubeconfig from the secrets
    - name: Install and configure kubectl
      run: |
        curl https://storage.googleapis.com/kubernetes-release/release/v1.27.3/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        echo '${{ secrets.KUBECONFIG }}' > kubeconfig.yaml

      # Using "kubectl patch" updates connector versions one by one
    - name: Update connector images
      run: |
        export KUBECONFIG=kubeconfig.yaml
        pods=$(kubectl get pods -l type=connector -n timechain -o=jsonpath='{.items[*].metadata.name}')
        echo "Update connector version to latest";

        sleep 10;
        for pod in $pods; do
            echo "Updating $pod image to latest";
            kubectl delete pod $pod -n timechain;
            sleep 10;
            # TODO: health check for pods would be super nice
        done
