use crate::rstd::vec::Vec;
use ethereum_types::{H160, U256};

#[cfg(feature = "serde")]
use crate::serde_utils::{bytes_to_hex, uint_to_hex};

/// Legacy transaction that use the transaction format existing before typed transactions were
/// introduced in EIP-2718. Legacy transactions donâ€™t use access lists or incorporate EIP-1559 fee
/// market changes.
#[derive(Clone, Default, PartialEq, Eq, Debug, Hash)]
#[cfg_attr(feature = "scale-info", derive(scale_info::TypeInfo))]
#[cfg_attr(feature = "scale-codec", derive(parity_scale_codec::Encode, parity_scale_codec::Decode))]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(rename_all = "camelCase")
)]
pub struct LegacyTransaction {
    /// The nonce of the transaction. If set to `None`, no checks are performed.
    #[cfg_attr(feature = "serde", serde(with = "uint_to_hex"))]
    pub nonce: u64,

    /// Gas price
    pub gas_price: U256,

    /// Supplied gas
    #[cfg_attr(feature = "serde", serde(rename = "gas", with = "uint_to_hex"))]
    pub gas_limit: u64,

    /// Recipient address (None for contract creation)
    #[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
    pub to: Option<H160>,

    /// Transferred value
    pub value: U256,

    /// The data of the transaction.
    #[cfg_attr(
        feature = "serde",
        serde(with = "bytes_to_hex", skip_serializing_if = "Vec::is_empty")
    )]
    pub data: Vec<u8>,

    /// The chain ID of the transaction. If set to `None`, no checks are performed.
    ///
    /// Incorporated as part of the Spurious Dragon upgrade via [EIP-155].
    ///
    /// [EIP-155]: https://eips.ethereum.org/EIPS/eip-155
    #[cfg_attr(
        feature = "serde",
        serde(default, skip_serializing_if = "Option::is_none", with = "uint_to_hex")
    )]
    pub chain_id: Option<u64>,
}

#[cfg(all(test, feature = "serde"))]
pub mod tests {
    use super::LegacyTransaction;
    use hex_literal::hex;

    pub fn build_legacy(eip155: bool) -> (LegacyTransaction, serde_json::Value) {
        if eip155 {
            let tx = LegacyTransaction {
                chain_id: Some(1),
                nonce: 137,
                gas_price: 20_400_000_000u64.into(),
                gas_limit: 1_000_000,
                to: Some(hex!("dc6c91b569c98f9f6f74d90f9beff99fdaf4248b").into()),
                value: 278_427_500_000_000_000u64.into(),
                data: hex!("288b8133920339b815ee42a02099dcca27c01d192418334751613a1eea786a0c3a673cec000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032464a3bc15000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b14232b0204b2f7bb6ba5aff59ef36030f7fe38b00000000000000000000000041f8d14c9475444f30a80431c68cf24dc9a8369a000000000000000000000000b9e29984fe50602e7a619662ebed4f90d93824c7000000000000000000000000dc6c91b569c98f9f6f74d90f9beff99fdaf4248b0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d7625241afaa81faf3c2bd525f64f6e0ec3af39c1053d672b65c2f64992521e6f454e67000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000581b96d32320d6cb174e807b585a41f4faa8ba7da95e117f2abbcadbb257d37a5fcc16c2ba6db86200888ed85dd5eba547bb07fa0f9910950d3133026abafdd5c09e1f3896a7abb3c99e1f38f77be69448ee7770d18c001e0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000561c7dd7d43db98e3b7a6e18b4e97f0e254a5a6bb9b373d49d7e6676ccb1b02d50f131bca36928cb48cd0daec0499e9e93a390253c733607437bbebf0aa13b7080911f3896a7abb3c99e1f38f77be69448ee7770d18c0400000000000000000000").to_vec(),
            };
            let json = serde_json::json!({
                "nonce": "0x89",
                "gas": "0xf4240",
                "gasPrice": "0x4bfef4c00",
                "to": "0xdc6c91b569c98f9f6f74d90f9beff99fdaf4248b",
                "value": "0x3dd2c5609333800",
                "data": "0x288b8133920339b815ee42a02099dcca27c01d192418334751613a1eea786a0c3a673cec000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032464a3bc15000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b14232b0204b2f7bb6ba5aff59ef36030f7fe38b00000000000000000000000041f8d14c9475444f30a80431c68cf24dc9a8369a000000000000000000000000b9e29984fe50602e7a619662ebed4f90d93824c7000000000000000000000000dc6c91b569c98f9f6f74d90f9beff99fdaf4248b0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d7625241afaa81faf3c2bd525f64f6e0ec3af39c1053d672b65c2f64992521e6f454e67000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000581b96d32320d6cb174e807b585a41f4faa8ba7da95e117f2abbcadbb257d37a5fcc16c2ba6db86200888ed85dd5eba547bb07fa0f9910950d3133026abafdd5c09e1f3896a7abb3c99e1f38f77be69448ee7770d18c001e0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000561c7dd7d43db98e3b7a6e18b4e97f0e254a5a6bb9b373d49d7e6676ccb1b02d50f131bca36928cb48cd0daec0499e9e93a390253c733607437bbebf0aa13b7080911f3896a7abb3c99e1f38f77be69448ee7770d18c0400000000000000000000",
                "chainId": "0x1",
            });
            (tx, json)
        } else {
            let tx = LegacyTransaction {
                chain_id: None,
                nonce: 3166,
                gas_price: 60_000_000_000u64.into(),
                gas_limit: 300_000,
                to: Some(hex!("6b92c944c82c694725acbd1c000c277ea1a44f00").into()),
                value: 0.into(),
                data: hex!("41c0e1b5").into(),
            };
            let json = serde_json::json!({
                "gas": "0x493e0",
                "gasPrice": "0xdf8475800",
                "data": "0x41c0e1b5",
                "nonce": "0xc5e",
                "to": "0x6b92c944c82c694725acbd1c000c277ea1a44f00",
                "value": "0x0",
            });
            (tx, json)
        }
    }

    #[test]
    fn serde_encode_works() {
        // With EIP155
        let (tx, expected) = build_legacy(true);
        let actual = serde_json::to_value(&tx).unwrap();
        assert_eq!(expected, actual);
        let json_str = serde_json::to_string(&tx).unwrap();
        let decoded = serde_json::from_str::<LegacyTransaction>(&json_str).unwrap();
        assert_eq!(tx, decoded);

        // Without EIP155
        let (tx, expected) = build_legacy(false);
        let actual = serde_json::to_value(&tx).unwrap();
        assert_eq!(expected, actual);
        let json_str = serde_json::to_string(&tx).unwrap();
        let decoded = serde_json::from_str::<LegacyTransaction>(&json_str).unwrap();
        assert_eq!(tx, decoded);
    }
}
