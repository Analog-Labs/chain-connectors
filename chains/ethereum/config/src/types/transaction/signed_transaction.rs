use derivative::Derivative;
use ethereum_types::H256;

use super::signature::Signature;

#[cfg_attr(feature = "scale-info", derive(scale_info::TypeInfo))]
#[cfg_attr(feature = "scale-codec", derive(parity_scale_codec::Encode, parity_scale_codec::Decode))]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(rename_all = "camelCase")
)]
#[derive(Derivative)]
#[derivative(Clone, PartialEq, Eq, Debug)]
pub struct SignedTransaction<T> {
    #[cfg_attr(feature = "serde", serde(rename = "hash"))]
    pub tx_hash: H256,
    #[cfg_attr(
        feature = "serde",
        serde(
            bound(
                serialize = "T: serde::Serialize",
                deserialize = "T: serde::de::DeserializeOwned",
            ),
            flatten
        )
    )]
    pub payload: T,
    #[cfg_attr(feature = "serde", serde(flatten))]
    pub signature: Signature,
}

impl<T> SignedTransaction<T> {
    pub const fn new(tx_hash: H256, payload: T, signature: Signature) -> Self {
        Self { tx_hash, payload, signature }
    }
}

#[cfg(all(test, feature = "serde"))]
mod tests {
    use super::SignedTransaction;
    use crate::transaction::{
        access_list::{AccessList, AccessListItem},
        eip2930::Eip2930Transaction,
        legacy::LegacyTransaction,
        rpc_transaction::RpcTransaction,
        signature::{RecoveryId, Signature},
        typed_transaction::TypedTransaction,
    };
    use ethereum_types::{H160, H256, U256};
    use hex_literal::hex;

    fn build_eip2930() -> (H256, Eip2930Transaction, Signature) {
        let tx_hash =
            H256(hex!("a777326ad77731344d00263b06843be6ef05cbe9ab699e2ed0d1448f8b2b50a3"));
        let tx = Eip2930Transaction {
            chain_id: 1,
            nonce: 117,
            gas_price: 28_379_509_371u128.into(),
            gas_limit: 187_293,
            to: Some(H160(hex!("3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad"))),
            value: 3_650_000_000_000_000_000u128.into(),
            data: hex!("3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006547d41700000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000032a767a9562d00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000032a767a9562d000000000000000000000000000000000000000000000021b60af11987fa0670342f00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8b55ee890426341fe45ee6dc788d2d93d25b59063000000000000000000000000000000000000000000").to_vec(),
            access_list: AccessList(vec![AccessListItem {
                address: H160(hex!("3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad")),
                storage_keys: vec![
                    H256::zero(),
                    H256(hex!(
                        "a19fd53308a1c44a3ed22d3f20ed4229aa8909e0d0a90510ca482367ad42caa6"
                    )),
                    H256(hex!(
                        "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    )),
                ],
            }]),
        };
        let signature = Signature {
            v: RecoveryId::new(0x01),
            r: hex!("5fe8eb06ac27f44de3e8d1c7214f750b9fc8291ab63d71ea6a4456cfd328deb9").into(),
            s: hex!("41425cc35a5ed1c922c898cb7fda5cf3b165b4792ada812700bf55cbc21a75a1").into(),
        };
        (tx_hash, tx, signature)
    }

    #[test]
    fn serde_encode_works() {
        let (tx_hash, tx, sig) = build_eip2930();
        let signed_tx = SignedTransaction::new(tx_hash, tx, sig);
        let actual = serde_json::to_value(&signed_tx).unwrap();
        let expected = serde_json::json!({
            "hash": "0xa777326ad77731344d00263b06843be6ef05cbe9ab699e2ed0d1448f8b2b50a3",
            "chainId": "0x1",
            "nonce": "0x75",
            "gasPrice": "0x69b8cf27b",
            "gas": "0x2db9d",
            "to": "0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad",
            "value": "0x32a767a9562d0000",
            "data": "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006547d41700000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000032a767a9562d00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000032a767a9562d000000000000000000000000000000000000000000000021b60af11987fa0670342f00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8b55ee890426341fe45ee6dc788d2d93d25b59063000000000000000000000000000000000000000000",
            "accessList": [
                {
                    "address": "0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad",
                    "storageKeys": [
                        "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "0xa19fd53308a1c44a3ed22d3f20ed4229aa8909e0d0a90510ca482367ad42caa6",
                        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    ]
                }
            ],
            "v": "0x1",
            "r": "0x5fe8eb06ac27f44de3e8d1c7214f750b9fc8291ab63d71ea6a4456cfd328deb9",
            "s": "0x41425cc35a5ed1c922c898cb7fda5cf3b165b4792ada812700bf55cbc21a75a1"
        });
        assert_eq!(expected, actual);

        // can decode json
        let json_str = serde_json::to_string(&signed_tx).unwrap();
        let decoded =
            serde_json::from_str::<SignedTransaction<Eip2930Transaction>>(&json_str).unwrap();
        assert_eq!(signed_tx, decoded);
    }

    #[test]
    fn serde_decode_legacy_tx() {
        let json_tx = r#"
        {
            "hash": "0xb3fbbda7862791ec65c07b1162bd6c6aa10efc89196a8727790a9b03b3ca7bab",
            "nonce": "0x115",
            "blockHash": "0x533ae98e36b11720a6095de0cbae802e80719cede1e3a65e02379436993a2007",
            "blockNumber": "0x37cd6",
            "transactionIndex": "0x0",
            "from": "0xcf684dfb8304729355b58315e8019b1aa2ad1bac",
            "to": null,
            "value": "0x0",
            "gasPrice": "0xba43b7400",
            "gas": "0x2f4d60",
            "input": "0x60606040526009600060146101000a81548160ff021916908302179055505b6000600033600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550600091505b600060149054906101000a900460ff1660ff168260ff16101561010457600090505b600060149054906101000a900460ff1660ff168160ff1610156100f6578082600060149054906101000a900460ff1602016001600050826009811015610002579090601202016000508360098110156100025790906002020160005060010160146101000a81548160ff021916908302179055505b8080600101915050610074565b5b8180600101925050610052565b5b5050610160806101166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900480634166c1fd1461004457806341c0e1b51461007457610042565b005b61005b600480359060200180359060200150610081565b604051808260ff16815260200191505060405180910390f35b61007f6004506100cc565b005b60006001600050836009811015610002579090601202016000508260098110156100025790906002020160005060010160149054906101000a900460ff1690506100c6565b92915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561015d57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b56",
            "chainId": "0x1",
            "v": "0x1b",
            "r": "0x834b0e7866457890809cb81a33a59380e890e1cc0d6e17a81382e99132b16bc8",
            "s": "0x65dcc7686efc8f7937b3ae0d09d682cd3a7ead281a920ec39d4e2b0c34e972be",
            "type": "0x0"
        }"#;
        let actual = serde_json::from_str::<RpcTransaction>(json_tx).unwrap();
        let actual = SignedTransaction::<TypedTransaction>::try_from(actual).unwrap();
        let expected = SignedTransaction {
            tx_hash: H256(hex!("b3fbbda7862791ec65c07b1162bd6c6aa10efc89196a8727790a9b03b3ca7bab")),
            payload: TypedTransaction::Legacy(LegacyTransaction {
                chain_id: None,
                nonce: 0x0115,
                gas_price: 0x000b_a43b_7400_u64.into(),
                gas_limit: 0x002f_4d60,
                to: None,
                value: U256::zero(),
                data: hex!("60606040526009600060146101000a81548160ff021916908302179055505b6000600033600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550600091505b600060149054906101000a900460ff1660ff168260ff16101561010457600090505b600060149054906101000a900460ff1660ff168160ff1610156100f6578082600060149054906101000a900460ff1602016001600050826009811015610002579090601202016000508360098110156100025790906002020160005060010160146101000a81548160ff021916908302179055505b8080600101915050610074565b5b8180600101925050610052565b5b5050610160806101166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900480634166c1fd1461004457806341c0e1b51461007457610042565b005b61005b600480359060200180359060200150610081565b604051808260ff16815260200191505060405180910390f35b61007f6004506100cc565b005b60006001600050836009811015610002579090601202016000508260098110156100025790906002020160005060010160149054906101000a900460ff1690506100c6565b92915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561015d57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b56").to_vec(),
            }),
            signature: Signature {
                v: RecoveryId::new(0x1b),
                r: hex!("834b0e7866457890809cb81a33a59380e890e1cc0d6e17a81382e99132b16bc8").into(),
                s: hex!("65dcc7686efc8f7937b3ae0d09d682cd3a7ead281a920ec39d4e2b0c34e972be").into(),
            },
        };

        assert_eq!(expected, actual);
    }

    #[test]
    fn serde_decode_legacy_eip155() {
        let json_tx = r#"
        {
            "blockHash": "0x1b05659b54037e74a4f8f5b9c46ee9d53b8eb5a573fb53c4ffb65bc381ff0076",
            "blockNumber": "0x81ed64",
            "from": "0x1f3896a7abb3c99e1f38f77be69448ee7770d18c",
            "gas": "0xf4240",
            "gasPrice": "0x4bfef4c00",
            "hash": "0xdf99f8176f765d84ed1c00a12bba00206c6da97986c802a532884aca5aaa3809",
            "input": "0x288b8133920339b815ee42a02099dcca27c01d192418334751613a1eea786a0c3a673cec000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032464a3bc15000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b14232b0204b2f7bb6ba5aff59ef36030f7fe38b00000000000000000000000041f8d14c9475444f30a80431c68cf24dc9a8369a000000000000000000000000b9e29984fe50602e7a619662ebed4f90d93824c7000000000000000000000000dc6c91b569c98f9f6f74d90f9beff99fdaf4248b0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d7625241afaa81faf3c2bd525f64f6e0ec3af39c1053d672b65c2f64992521e6f454e67000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000581b96d32320d6cb174e807b585a41f4faa8ba7da95e117f2abbcadbb257d37a5fcc16c2ba6db86200888ed85dd5eba547bb07fa0f9910950d3133026abafdd5c09e1f3896a7abb3c99e1f38f77be69448ee7770d18c001e0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000561c7dd7d43db98e3b7a6e18b4e97f0e254a5a6bb9b373d49d7e6676ccb1b02d50f131bca36928cb48cd0daec0499e9e93a390253c733607437bbebf0aa13b7080911f3896a7abb3c99e1f38f77be69448ee7770d18c0400000000000000000000",
            "nonce": "0x89",
            "to": "0xdc6c91b569c98f9f6f74d90f9beff99fdaf4248b",
            "transactionIndex": "0x59",
            "value": "0x3dd2c5609333800",
            "type": "0x0",
            "chainId": "0x1",
            "v": "0x25",
            "r": "0x20d7064f0b3c956e603c994fd83247499ede5a1209d6c997d2b2ea29b5627a7",
            "s": "0x6f6c3ceb0a57952386cbb9ceb3e4d05f1d4bc8d30b67d56281d89775f972a34d"
        }"#;
        let actual = serde_json::from_str::<RpcTransaction>(json_tx).unwrap();
        let actual = SignedTransaction::<TypedTransaction>::try_from(actual).unwrap();
        let expected = SignedTransaction {
            tx_hash: H256(hex!("df99f8176f765d84ed1c00a12bba00206c6da97986c802a532884aca5aaa3809")),
            payload: TypedTransaction::Legacy(LegacyTransaction {
                chain_id: Some(0x1),
                nonce: 0x89,
                gas_price: 0x0004_bfef_4c00_u64.into(),
                gas_limit: 0xf4240,
                to: Some(H160(hex!("dc6c91b569c98f9f6f74d90f9beff99fdaf4248b"))),
                value: U256::from(0x03dd_2c56_0933_3800_u128),
                data: hex!("288b8133920339b815ee42a02099dcca27c01d192418334751613a1eea786a0c3a673cec000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032464a3bc15000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b14232b0204b2f7bb6ba5aff59ef36030f7fe38b00000000000000000000000041f8d14c9475444f30a80431c68cf24dc9a8369a000000000000000000000000b9e29984fe50602e7a619662ebed4f90d93824c7000000000000000000000000dc6c91b569c98f9f6f74d90f9beff99fdaf4248b0000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000003dd2c560933380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d7625241afaa81faf3c2bd525f64f6e0ec3af39c1053d672b65c2f64992521e6f454e67000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000581b96d32320d6cb174e807b585a41f4faa8ba7da95e117f2abbcadbb257d37a5fcc16c2ba6db86200888ed85dd5eba547bb07fa0f9910950d3133026abafdd5c09e1f3896a7abb3c99e1f38f77be69448ee7770d18c001e0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000561c7dd7d43db98e3b7a6e18b4e97f0e254a5a6bb9b373d49d7e6676ccb1b02d50f131bca36928cb48cd0daec0499e9e93a390253c733607437bbebf0aa13b7080911f3896a7abb3c99e1f38f77be69448ee7770d18c0400000000000000000000").to_vec(),
            }),
            signature: Signature {
                v: RecoveryId::new(0x25),
                r: hex!("020d7064f0b3c956e603c994fd83247499ede5a1209d6c997d2b2ea29b5627a7").into(),
                s: hex!("6f6c3ceb0a57952386cbb9ceb3e4d05f1d4bc8d30b67d56281d89775f972a34d").into(),
            },
        };

        assert_eq!(expected, actual);
    }
}
