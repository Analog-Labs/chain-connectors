use testcontainers::core::WaitFor;
use testcontainers::clients::Cli;
use testcontainers::Container;

pub trait BlockchainNode {
    fn image(&self) -> &str;
    fn command(&self) -> Vec<String>;
    fn expose(&self) -> Vec<u16>;
}

pub struct Image {
    image: String,
    expose: Vec<u16>,
}

impl testcontainers::Image for Image {
    type Args = Vec<String>;

    fn name(&self) -> String {
        self.image.clone()
    }

    fn tag(&self) -> String {
        "latest".into()
    }

    fn ready_conditions(&self) -> Vec<WaitFor> {
        vec![WaitFor::Healthcheck]
    }

    fn expose_ports(&self) -> Vec<u16> {
        self.expose.clone()
    }
}

pub struct Docker{
    client: Cli,
    containers: Vec<Container<'static, Image>>,
}

impl Docker {
    pub fn new() -> Self {
        let client = Cli::docker();
        Self { client, containers: vec![] }
    }

    pub fn run_node<T: BlockchainNode>(&mut self, node: &T) {
        let image = Image {
            image: node.image().into(),
            expose: node.expose(),
        };
        let command = node.command();
        let container = self.client.run((image, command));
        self.containers.push(container);
    }
}
