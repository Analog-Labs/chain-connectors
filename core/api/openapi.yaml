openapi: 3.0.2
info:
  description: |
    Build Once. Integrate Your Blockchain Everywhere.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Rosetta
  version: 1.4.13
servers:
- url: /
paths:
  /network/list:
    post:
      description: |
        This endpoint returns a list of NetworkIdentifiers that the Rosetta
        server supports.
      operationId: networkList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkListResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get List of Available Networks
      tags:
      - Network
  /network/status:
    post:
      description: |
        This endpoint returns the current status of the network requested. Any
        NetworkIdentifier returned by /network/list should be accessible here.
      operationId: networkStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStatusResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Network Status
      tags:
      - Network
  /network/options:
    post:
      description: "This endpoint returns the version information and allowed\nnetwork-specific\
        \ types for a NetworkIdentifier. Any\nNetworkIdentifier returned by /network/list\
        \ should be accessible here.\n\nBecause options are retrievable in the context\
        \ of a NetworkIdentifier,\nit is possible to define unique options for each\
        \ network.\n"
      operationId: networkOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkOptionsResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Network Options
      tags:
      - Network
  /block:
    post:
      description: "Get a block by its Block Identifier. If transactions are returned\
        \ in\nthe same call to the node as fetching the block, the response should\n\
        include these transactions in the Block object. If not, an array of\nTransaction\
        \ Identifiers should be returned so /block/transaction\nfetches can be done\
        \ to get all transaction information.\n\nWhen requesting a block by the hash\
        \ component of the BlockIdentifier,\nthis request MUST be idempotent: repeated\
        \ invocations for the same\nhash-identified block must return the exact same\
        \ block contents.\n\nNo such restriction is imposed when requesting a block\
        \ by height,\ngiven that a chain reorg event might cause the specific block\
        \ at\nheight `n` to be set to a different one.\n"
      operationId: block
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Block
      tags:
      - Block
  /block/transaction:
    post:
      description: "Get a transaction in a block by its Transaction Identifier. This\
        \ endpoint\nshould only be used when querying a node for a block does not\
        \ return all\ntransactions contained within it.\n\nAll transactions returned\
        \ by this endpoint must be appended to any\ntransactions returned by the /block\
        \ method by consumers of this data.\nFetching a transaction by hash is considered\
        \ an Explorer Method\n(which is classified under the Future Work section).\n\
        \nThis method can be used to let consumers to paginate results when the \n\
        block trasactions count is too big to be returned in a single BlockResponse.\n\
        \nCalling this endpoint requires reference to a BlockIdentifier because\n\
        transaction parsing can change depending on which block contains the\ntransaction.\
        \ For example, in Bitcoin it is necessary to know which block\ncontains a\
        \ transaction to determine the destination of fee payments.\nWithout specifying\
        \ a block identifier, the node\nwould have to infer which block to use (which\
        \ could change during a re-org).\n\nImplementations that require fetching\
        \ previous transactions to populate\nthe response (ex: Previous UTXOs in Bitcoin)\
        \ may find it useful to run a\ncache within the Rosetta server in the /data\
        \ directory\n(on a path that does not conflict with the node).\n"
      operationId: blockTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockTransactionResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Block Transaction
      tags:
      - Block
  /mempool:
    post:
      description: Get all Transaction Identifiers in the mempool
      operationId: mempool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get All Mempool Transactions
      tags:
      - Mempool
  /mempool/transaction:
    post:
      description: "Get a transaction in the mempool by its Transaction Identifier.\
        \ This is\na separate request than fetching a block transaction (/block/transaction)\n\
        because some blockchain nodes need to know that a transaction query is\nfor\
        \ something in the mempool instead of a transaction in a block.\n\nTransactions\
        \ may not be fully parsable until they are in a block (ex: may\nnot be possible\
        \ to determine the fee to pay before a transaction is\nexecuted). On this\
        \ endpoint, it is ok that returned transactions are\nonly estimates of what\
        \ may actually be included in a block.\n"
      operationId: mempoolTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MempoolTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolTransactionResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Mempool Transaction
      tags:
      - Mempool
  /account/balance:
    post:
      description: "Get an array of all AccountBalances for an AccountIdentifier and\
        \ the\nBlockIdentifier at which the balance lookup was performed. The BlockIdentifier\n\
        must always be returned because some consumers of account balance data need\n\
        to know specifically at which block the balance was calculated to\ncompare\
        \ balances they compute from operations with the balance returned\nby the\
        \ node.\n\nIt is important to note that making a balance request for an account\n\
        without populating the SubAccountIdentifier should not result in the\nbalance\
        \ of all possible SubAccountIdentifiers being returned. Rather,\nit should\
        \ result in the balance pertaining to no SubAccountIdentifiers\nbeing returned\
        \ (sometimes called the liquid balance). To get all\nbalances associated with\
        \ an account, it may be necessary to\nperform multiple balance requests with\
        \ unique AccountIdentifiers.\n\nIt is also possible to perform a historical\
        \ balance lookup (if the server\nsupports it) by passing in an optional BlockIdentifier.\n"
      operationId: accountBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountBalanceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get an Account's Balance
      tags:
      - Account
  /account/coins:
    post:
      description: "Get an array of all unspent coins for an AccountIdentifier and\
        \ the\nBlockIdentifier at which the lookup was performed. If your implementation\n\
        does not support coins (i.e. it is for an account-based blockchain),\nyou\
        \ do not need to implement this endpoint. If you implementation does\nsupport\
        \ coins (i.e. it is fro a UTXO-based blockchain), you MUST\nalso complete\
        \ the `/account/balance` endpoint.\n\nIt is important to note that making\
        \ a coins request for an account\nwithout populating the SubAccountIdentifier\
        \ should not result in the\ncoins of all possible SubAccountIdentifiers being\
        \ returned. Rather,\nit should result in the coins pertaining to no SubAccountIdentifiers\n\
        being returned. To get all coins associated with an account, it may be\nnecessary\
        \ to perform multiple coin requests with unique AccountIdentifiers.\n\nOptionally,\
        \ an implementation may choose to support updating an AccountIdentifier's\n\
        unspent coins based on the contents of the mempool. Note, using this functionality\n\
        breaks any guarantee of idempotency.\n"
      operationId: accountCoins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCoinsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCoinsResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get an Account's Unspent Coins
      tags:
      - Account
  /construction/derive:
    post:
      description: |
        Derive returns the AccountIdentifier associated with a public key.

        Blockchains that require an on-chain action to create an
        account should not implement this method.
      operationId: constructionDerive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionDeriveRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionDeriveResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Derive an AccountIdentifier from a PublicKey
      tags:
      - Construction
  /construction/preprocess:
    post:
      description: "Preprocess is called prior to `/construction/payloads` to construct\
        \ a\nrequest for any metadata that is needed for transaction construction\n\
        given (i.e. account nonce).\n\nThe `options` object returned from this endpoint\
        \ will be sent to the `/construction/metadata`\nendpoint UNMODIFIED by the\
        \ caller (in an offline execution environment). If\nyour Construction API\
        \ implementation has configuration options, they MUST\nbe specified in the\
        \ `/construction/preprocess` request (in the `metadata`\nfield).\n"
      operationId: constructionPreprocess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionPreprocessRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionPreprocessResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create a Request to Fetch Metadata
      tags:
      - Construction
  /construction/metadata:
    post:
      description: "Get any information required to construct a transaction for a\
        \ specific\nnetwork. Metadata returned here could be a recent hash to use,\
        \ an\naccount sequence number, or even arbitrary chain state. The request\n\
        used when calling this endpoint is created by calling `/construction/preprocess`\n\
        in an offline environment.\n\nYou should NEVER assume that the request sent\
        \ to this endpoint will be\ncreated by the caller or populated with any custom\
        \ parameters. This must\noccur in `/construction/preprocess`.\n\nIt is important\
        \ to clarify that this endpoint should not pre-construct\nany transactions\
        \ for the client (this should happen in `/construction/payloads`).\nThis endpoint\
        \ is left purposely unstructured because of the wide scope\nof metadata that\
        \ could be required.\n"
      operationId: constructionMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionMetadataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionMetadataResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Metadata for Transaction Construction
      tags:
      - Construction
  /construction/payloads:
    post:
      description: "Payloads is called with an array of operations\nand the response\
        \ from `/construction/metadata`. It returns an\nunsigned transaction blob\
        \ and a collection of payloads that must\nbe signed by particular AccountIdentifiers\
        \ using a certain SignatureType.\n\nThe array of operations provided in transaction\
        \ construction often times\ncan not specify all \"effects\" of a transaction\
        \ (consider invoked transactions\nin Ethereum). However, they can deterministically\
        \ specify the \"intent\"\nof the transaction, which is sufficient for construction.\
        \ For this reason,\nparsing the corresponding transaction in the Data API\
        \ (when it lands on chain)\nwill contain a superset of whatever operations\
        \ were provided during construction.\n"
      operationId: constructionPayloads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionPayloadsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionPayloadsResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Generate an Unsigned Transaction and Signing Payloads
      tags:
      - Construction
  /construction/combine:
    post:
      description: |
        Combine creates a network-specific transaction from an unsigned
        transaction and an array of provided signatures.

        The signed transaction returned from this method will be sent to the
        `/construction/submit` endpoint by the caller.
      operationId: constructionCombine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionCombineRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionCombineResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create Network Transaction from Signatures
      tags:
      - Construction
  /construction/parse:
    post:
      description: "Parse is called on both unsigned and signed transactions to\n\
        understand the intent of the formulated transaction.\n\nThis is run as a sanity\
        \ check before signing (after `/construction/payloads`)\nand before broadcast\
        \ (after `/construction/combine`). \n"
      operationId: constructionParse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionParseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionParseResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Parse a Transaction
      tags:
      - Construction
  /construction/hash:
    post:
      description: |
        TransactionHash returns the network-specific transaction hash for
        a signed transaction.
      operationId: constructionHash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionHashRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdentifierResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get the Hash of a Signed Transaction
      tags:
      - Construction
  /construction/submit:
    post:
      description: "Submit a pre-signed transaction to the node. This call should\
        \ not block\non the transaction being included in a block. Rather, it should\
        \ return\nimmediately with an indication of whether or not the transaction\
        \ was\nincluded in the mempool.\n\nThe transaction submission response should\
        \ only return a 200 status\nif the submitted transaction could be included\
        \ in the mempool.\nOtherwise, it should return an error.\n"
      operationId: constructionSubmit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionSubmitRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdentifierResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Submit a Signed Transaction
      tags:
      - Construction
  /call:
    post:
      description: "Call invokes an arbitrary, network-specific procedure call with\
        \ network-specific\nparameters. The guidance for what this endpoint should\
        \ or could do is\npurposely left vague. In Ethereum, this could be used to\
        \ invoke `eth_call`\nto implement an entire Rosetta API interface for some\
        \ smart contract that\nis not parsed by the implementation creator (like a\
        \ DEX). This endpoint\ncould also be used to provide access to data that does\
        \ not map\nto any Rosetta models instead of requiring an integrator to use\
        \ some\nnetwork-specific SDK and call some network-specific endpoint (like\
        \ surfacing\nstaking parameters).\n\nCall is NOT a replacement for implementing\
        \ Rosetta API endpoints or mapping\nnetwork-specific data to Rosetta models.\
        \ Rather, it enables developers to build\nadditional Rosetta API interfaces\
        \ for things they care about without introducing\ncomplexity into a base-level\
        \ Rosetta implementation. Simply put, imagine\nthat the average integrator\
        \ will use layered Rosetta API implementations\nthat each surfaces unique\
        \ data.\n"
      operationId: call
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Make a Network-Specific Procedure Call
      tags:
      - Call
  /events/blocks:
    post:
      description: "`/events/blocks` allows the caller to query a sequence\nof BlockEvents\
        \ indicating which blocks were added and\nremoved from storage to reach the\
        \ current state.\nFollowing BlockEvents allows lightweight clients to update\n\
        their state without needing to implement their own syncing\nlogic (like finding\
        \ the common parent in a reorg).\n\n`/events/blocks` is considered an \"indexer\"\
        \ endpoint\nand Rosetta implementations are not required to complete it\n\
        to adhere to the Rosetta spec. However, any Rosetta \"indexer\"\nMUST support\
        \ this endpoint.\n"
      operationId: eventsBlocks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsBlocksRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsBlocksResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: "[INDEXER] Get a range of BlockEvents\n"
      tags:
      - Events
  /search/transactions:
    post:
      description: "`/search/transactions` allows the caller to search for\ntransactions\
        \ that meet certain conditions. Some conditions\ninclude matching a transaction\
        \ hash, containing an\noperation with a certain status, or containing an operation\n\
        that affects a certain account.\n\n`/search/transactions` is considered an\
        \ \"indexer\" endpoint\nand Rosetta implementations are not required to complete\
        \ it\nto adhere to the Rosetta spec. However, any Rosetta \"indexer\"\nMUST\
        \ support this endpoint.\n"
      operationId: searchTransactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTransactionsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTransactionsResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: "[INDEXER] Search for Transactions\n"
      tags:
      - Search
components:
  schemas:
    NetworkIdentifier:
      description: |
        The network_identifier specifies which network a particular object is associated with.
      example:
        blockchain: bitcoin
        sub_network_identifier:
          metadata:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          network: shard 1
        network: mainnet
      properties:
        blockchain:
          example: bitcoin
          type: string
        network:
          description: "If a blockchain has a specific chain-id or network identifier,\
            \ it\nshould go in this field. It is up to the client to determine which\n\
            network-specific identifier is mainnet or testnet.\n"
          example: mainnet
          type: string
        sub_network_identifier:
          $ref: '#/components/schemas/SubNetworkIdentifier'
      required:
      - blockchain
      - network
      type: object
    SubNetworkIdentifier:
      description: "In blockchains with sharded state, the SubNetworkIdentifier\n\
        is required to query some object on a specific shard. This identifier is\n\
        optional for all non-sharded blockchains.\n"
      example:
        metadata:
          producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        network: shard 1
      properties:
        network:
          example: shard 1
          type: string
        metadata:
          example:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - network
      type: object
    BlockIdentifier:
      description: |
        The block_identifier uniquely identifies a block in a particular network.
      example:
        index: 1123941
        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        index:
          description: |
            This is also known as the block height.
          example: 1123941
          format: int64
          type: integer
        hash:
          description: |
            This should be normalized according to the case specified in the block_hash_case
            network options.
          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          type: string
      required:
      - hash
      - index
      type: object
    PartialBlockIdentifier:
      description: "When fetching data by BlockIdentifier, it may be possible to only\
        \ specify the\nindex or hash. If neither property is specified, it is assumed\
        \ that the\nclient is making a request at the current block.\n"
      example:
        index: 1123941
        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        index:
          example: 1123941
          format: int64
          type: integer
        hash:
          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          type: string
      type: object
    TransactionIdentifier:
      description: |
        The transaction_identifier uniquely identifies a transaction in a particular network and block
        or in the mempool.
      example:
        hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        hash:
          description: "Any transactions that are attributable only to a block (ex:\
            \ a block event)\nshould use the hash of the block as the identifier.\
            \  This should be normalized according to\nthe case specified in the transaction_hash_case\
            \ in network options.\n"
          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          type: string
      required:
      - hash
      type: object
    OperationIdentifier:
      description: |
        The operation_identifier uniquely identifies an operation within a transaction.
      example:
        index: 5
        network_index: 0
      properties:
        index:
          description: "The operation index is used to ensure each operation has a\
            \ unique identifier within\na transaction. This index is only relative\
            \ to the transaction and NOT GLOBAL. The\noperations in each transaction\
            \ should start from index 0.\n\nTo clarify, there may not be any notion\
            \ of an operation index in the blockchain being described.\n"
          example: 5
          format: int64
          minimum: 0
          type: integer
        network_index:
          description: "Some blockchains specify an operation index that is essential\
            \ for client use. For example,\nBitcoin uses a network_index to identify\
            \ which UTXO was used in a transaction.\n\nnetwork_index should not be\
            \ populated if there is no notion of an operation index in a\nblockchain\
            \ (typically most account-based blockchains).\n"
          example: 0
          format: int64
          minimum: 0
          type: integer
      required:
      - index
      type: object
    AccountIdentifier:
      description: "The account_identifier uniquely identifies an account within a\
        \ network.\nAll fields in the account_identifier are utilized to determine\
        \ this uniqueness\n(including the metadata field, if populated).\n"
      example:
        metadata: "{}"
        address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
        sub_account:
          metadata: "{}"
          address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        address:
          description: |
            The address may be a cryptographic public key (or some encoding of it) or a provided username.
          example: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          type: string
        sub_account:
          $ref: '#/components/schemas/SubAccountIdentifier'
        metadata:
          description: |
            Blockchains that utilize a username model (where the address is not a derivative of a cryptographic
            public key) should specify the public key(s) owned by the address in metadata.
          type: object
      required:
      - address
      type: object
    SubAccountIdentifier:
      description: |
        An account may have state specific to a contract address (ERC-20 token)
        and/or a stake (delegated balance). The sub_account_identifier should
        specify which state (if applicable) an account instantiation refers to.
      example:
        metadata: "{}"
        address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        address:
          description: "The SubAccount address may be a cryptographic value or some\n\
            other identifier (ex: bonded) that uniquely specifies a SubAccount.\n"
          example: 0x6b175474e89094c44da98b954eedeac495271d0f
          type: string
        metadata:
          description: "If the SubAccount address is not sufficient to uniquely specify\
            \ a SubAccount,\nany other identifying information can be stored here.\n\
            \nIt is important to note that two SubAccounts with identical addresses\
            \ but\ndiffering metadata will not be considered equal by clients.\n"
          type: object
      required:
      - address
      type: object
    Block:
      description: "Blocks contain an array of Transactions that\noccurred at a particular\
        \ BlockIdentifier.\n\nA hard requirement for blocks returned by Rosetta\n\
        implementations is that they MUST be _inalterable_:\nonce a client has requested\
        \ and received\na block identified by a specific BlockIndentifier,\nall future\
        \ calls for that same BlockIdentifier\nmust return the same block contents.\n"
      example:
        metadata:
          transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          difficulty: "123891724987128947"
        parent_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        transactions:
        - metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          related_transactions:
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
        - metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          related_transactions:
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        timestamp: 1582833600000
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        parent_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        timestamp:
          description: |
            The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in
            milliseconds because some blockchains produce blocks more often than once a second.
          example: 1582833600000
          format: int64
          minimum: 0
          type: integer
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        metadata:
          example:
            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
            difficulty: "123891724987128947"
          type: object
      required:
      - block_identifier
      - parent_block_identifier
      - timestamp
      - transactions
      type: object
    Transaction:
      description: |
        Transactions contain an array of Operations
        that are attributable to the same TransactionIdentifier.
      example:
        metadata:
          size: 12378
          lockTime: 1582272577
        operations:
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        related_transactions:
        - transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          network_identifier:
            blockchain: bitcoin
            sub_network_identifier:
              metadata:
                producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
              network: shard 1
            network: mainnet
          direction: null
        - transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          network_identifier:
            blockchain: bitcoin
            sub_network_identifier:
              metadata:
                producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
              network: shard 1
            network: mainnet
          direction: null
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        related_transactions:
          items:
            $ref: '#/components/schemas/RelatedTransaction'
          type: array
        metadata:
          description: |
            Transactions that are related to other transactions (like a cross-shard transaction) should include
            the tranaction_identifier of these transactions in the metadata.
          example:
            size: 12378
            lockTime: 1582272577
          type: object
      required:
      - operations
      - transaction_identifier
      type: object
    Operation:
      description: "Operations contain all balance-changing information within a\n\
        transaction. They are always one-sided (only affect 1 AccountIdentifier)\n\
        and can succeed or fail independently from a Transaction.\n\nOperations are\
        \ used both to represent on-chain data (Data API) and to construct\nnew transactions\
        \ (Construction API), creating a standard interface for reading\nand writing\
        \ to blockchains.\n"
      example:
        amount:
          metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        metadata:
          asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
            03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
        related_operations:
        - index: 1
        - index: 2
        type: Transfer
        coin_change:
          coin_identifier:
            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          coin_action: null
        account:
          metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        operation_identifier:
          index: 5
          network_index: 0
        status: Reverted
      properties:
        operation_identifier:
          $ref: '#/components/schemas/OperationIdentifier'
        related_operations:
          description: "Restrict referenced related_operations to identifier indices\n\
            < the current operation_identifier.index. This ensures there\nexists a\
            \ clear DAG-structure of relations.\n\nSince operations are one-sided,\
            \ one could imagine relating operations\nin a single transfer or linking\
            \ operations in a call tree.\n"
          example:
          - index: 1
          - index: 2
          items:
            $ref: '#/components/schemas/OperationIdentifier'
          type: array
        type:
          description: |
            Type is the network-specific type of the operation. Ensure that any type that can be returned here is also
            specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all
            block data.
          example: Transfer
          type: string
        status:
          description: "Status is the network-specific status of the operation. Status\
            \ is not defined on the transaction object\nbecause blockchains with smart\
            \ contracts may have transactions that partially apply (some operations\n\
            are successful and some are not). Blockchains with atomic transactions\
            \ (all operations succeed or\nall operations fail) will have the same\
            \ status for each operation.\n\nOn-chain operations (operations retrieved\
            \ in the `/block` and `/block/transaction` endpoints) MUST have\na populated\
            \ status field (anything on-chain must have succeeded or failed). However,\
            \ operations provided\nduring transaction construction (often times called\
            \ \"intent\" in the documentation) MUST NOT\nhave a populated status field\
            \ (operations yet to be included on-chain have not yet succeeded or failed).\n"
          example: Reverted
          type: string
        account:
          $ref: '#/components/schemas/AccountIdentifier'
        amount:
          $ref: '#/components/schemas/Amount'
        coin_change:
          $ref: '#/components/schemas/CoinChange'
        metadata:
          example:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          type: object
      required:
      - operation_identifier
      - type
      type: object
    Amount:
      description: |
        Amount is some Value of a Currency.
        It is considered invalid to specify a Value without a Currency.
      example:
        metadata: "{}"
        currency:
          symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        value: "1238089899992"
      properties:
        value:
          description: "Value of the transaction in atomic units represented as an\
            \ arbitrary-sized signed integer.\n\nFor example, 1 BTC would be represented\
            \ by a value of 100000000.\n"
          example: "1238089899992"
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        metadata:
          type: object
      required:
      - currency
      - value
      type: object
    Currency:
      description: |
        Currency is composed of a canonical Symbol and
        Decimals. This Decimals value is used to convert
        an Amount.Value from atomic units (Satoshis) to standard units
        (Bitcoins).
      example:
        symbol: BTC
        metadata:
          Issuer: Satoshi
        decimals: 8
      properties:
        symbol:
          description: |
            Canonical symbol associated with a currency.
          example: BTC
          type: string
        decimals:
          description: "Number of decimal places in the standard unit representation\
            \ of the amount.\n\nFor example, BTC has 8 decimals. Note that it is not\
            \ possible to represent\nthe value of some currency in atomic units that\
            \ is not base 10.\n"
          example: 8
          format: int32
          minimum: 0
          type: integer
        metadata:
          description: "Any additional information related to the currency itself.\n\
            \nFor example, it would be useful to populate this object with the contract\
            \ address\nof an ERC-20 token.\n"
          example:
            Issuer: Satoshi
          type: object
      required:
      - decimals
      - symbol
      type: object
    SyncStatus:
      description: |
        SyncStatus is used to provide additional context about an
        implementation's sync status.

        This object is often used by implementations to indicate healthiness
        when block data cannot be queried until some sync phase completes or
        cannot be determined by comparing the timestamp of the most recent
        block with the current time.
      example:
        target_index: 150
        synced: true
        stage: header sync
        current_index: 100
      properties:
        current_index:
          description: "CurrentIndex is the index of the last synced block in the\n\
            current stage.\n\nThis is a separate field from current_block_identifier\
            \ in\nNetworkStatusResponse because blocks with indices up to and including\n\
            the current_index may not yet be queryable by the caller. To reiterate,\n\
            all indices up to and including current_block_identifier in\nNetworkStatusResponse\
            \ must be queryable via the /block endpoint (excluding\nindices less than\
            \ oldest_block_identifier).\n"
          example: 100
          format: int64
          type: integer
        target_index:
          description: |
            TargetIndex is the index of the block that the implementation
            is attempting to sync to in the current stage.
          example: 150
          format: int64
          type: integer
        stage:
          description: |
            Stage is the phase of the sync process.
          example: header sync
          type: string
        synced:
          description: "synced is a boolean that indicates if an implementation has\
            \ synced up\nto the most recent block. If this field is not populated,\
            \ the caller\nshould rely on a traditional tip timestamp comparison to\
            \ determine if\nan implementation is synced.\n\nThis field is particularly\
            \ useful for quiescent blockchains (blocks\nonly produced when there are\
            \ pending transactions). In these blockchains,\nthe most recent block\
            \ could have a timestamp far behind the current\ntime but the node could\
            \ be healthy and at tip.\n"
          type: boolean
      type: object
    Peer:
      description: |
        A Peer is a representation of a node's peer.
      example:
        metadata: "{}"
        peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
      properties:
        peer_id:
          example: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: string
        metadata:
          type: object
      required:
      - peer_id
      type: object
    Version:
      description: |
        The Version object is utilized to inform the client
        of the versions of different components of the Rosetta
        implementation.
      example:
        metadata: "{}"
        rosetta_version: 1.2.5
        node_version: 1.0.2
        middleware_version: 0.2.7
      properties:
        rosetta_version:
          description: |
            The rosetta_version is the version of the Rosetta interface
            the implementation adheres to. This can be useful for clients
            looking to reliably parse responses.
          example: 1.2.5
          type: string
        node_version:
          description: |
            The node_version is the canonical version of the node
            runtime. This can help clients manage deployments.
          example: 1.0.2
          type: string
        middleware_version:
          description: "When a middleware server is used to adhere to the Rosetta\n\
            interface, it should return its version here. This can help\nclients manage\
            \ deployments.\n"
          example: 0.2.7
          type: string
        metadata:
          description: |
            Any other information that may be useful about versioning
            of dependent services should be returned here.
          type: object
      required:
      - node_version
      - rosetta_version
      type: object
    Allow:
      description: "Allow specifies supported Operation status, Operation types,\n\
        and all possible error statuses. This Allow object is used by\nclients to\
        \ validate the correctness of a Rosetta Server implementation. It is\nexpected\
        \ that these clients will error if they receive some response\nthat contains\
        \ any of the above information that is not specified here.\n"
      example:
        balance_exemptions:
        - sub_account_address: staking
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          exemption_type: null
        - sub_account_address: staking
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          exemption_type: null
        mempool_coins: true
        operation_types:
        - TRANSFER
        - TRANSFER
        transaction_hash_case: null
        historical_balance_lookup: true
        operation_statuses:
        - status: SUCCESS
          successful: true
        - status: SUCCESS
          successful: true
        timestamp_start_index: 0
        call_methods:
        - eth_call
        - eth_call
        block_hash_case: null
        errors:
        - retriable: true
          code: 12
          description: This error is returned when the requested AccountIdentifier
            is improperly formatted.
          details:
            address: 0x1dcc4de8dec75d7aab85b567b6
            error: not base64
          message: Invalid account format
        - retriable: true
          code: 12
          description: This error is returned when the requested AccountIdentifier
            is improperly formatted.
          details:
            address: 0x1dcc4de8dec75d7aab85b567b6
            error: not base64
          message: Invalid account format
      properties:
        operation_statuses:
          description: |
            All Operation.Status this implementation supports. Any status
            that is returned during parsing that is not listed here will cause
            client validation to error.
          items:
            $ref: '#/components/schemas/OperationStatus'
          type: array
        operation_types:
          description: |
            All Operation.Type this implementation supports. Any type
            that is returned during parsing that is not listed here will
            cause client validation to error.
          items:
            example: TRANSFER
            type: string
          type: array
        errors:
          description: |
            All Errors that this implementation could return. Any error
            that is returned during parsing that is not listed here will
            cause client validation to error.
          items:
            $ref: '#/components/schemas/Error'
          type: array
        historical_balance_lookup:
          description: |
            Any Rosetta implementation that supports querying the balance
            of an account at any height in the past should set this to true.
          type: boolean
        timestamp_start_index:
          description: "If populated, `timestamp_start_index` indicates the first\
            \ block index\nwhere block timestamps are considered valid (i.e. all blocks\n\
            less than `timestamp_start_index` could have invalid timestamps).\nThis\
            \ is useful when the genesis block (or blocks) of a network\nhave timestamp\
            \ 0.\n\nIf not populated, block timestamps are assumed to be valid for\n\
            all available blocks.\n"
          format: int64
          minimum: 0
          type: integer
        call_methods:
          description: |
            All methods that are supported by the /call endpoint. Communicating
            which parameters should be provided to /call is the responsibility
            of the implementer (this is en lieu of defining an entire type
            system and requiring the implementer to define that in Allow).
          items:
            example: eth_call
            type: string
          type: array
        balance_exemptions:
          description: "BalanceExemptions is an array of BalanceExemption indicating\n\
            which account balances could change without a corresponding Operation.\n\
            \nBalanceExemptions should be used sparingly as they may\nintroduce significant\
            \ complexity for integrators that attempt\nto reconcile all account balance\
            \ changes.\n\nIf your implementation relies on any BalanceExemptions,\
            \ you MUST implement\nhistorical balance lookup (the ability to query\
            \ an account balance at any\nBlockIdentifier).\n"
          items:
            $ref: '#/components/schemas/BalanceExemption'
          type: array
        mempool_coins:
          description: "Any Rosetta implementation that can update an AccountIdentifier's\
            \ unspent\ncoins based on the contents of the mempool should populate\
            \ this field\nas true. If false, requests to `/account/coins` that set\
            \ `include_mempool`\nas true will be automatically rejected.\n"
          type: boolean
        block_hash_case:
          $ref: '#/components/schemas/Case'
        transaction_hash_case:
          $ref: '#/components/schemas/Case'
      required:
      - balance_exemptions
      - call_methods
      - errors
      - historical_balance_lookup
      - mempool_coins
      - operation_statuses
      - operation_types
      type: object
    OperationStatus:
      description: |
        OperationStatus is utilized to indicate which Operation
        status are considered successful.
      example:
        status: SUCCESS
        successful: true
      properties:
        status:
          description: |
            The status is the network-specific status of the operation.
          type: string
        successful:
          description: "An Operation is considered successful if the Operation.Amount\n\
            should affect the Operation.Account. Some blockchains (like Bitcoin)\n\
            only include successful operations in blocks but other blockchains\n(like\
            \ Ethereum) include unsuccessful operations that incur a fee.\n\nTo reconcile\
            \ the computed balance from the stream of Operations,\nit is critical\
            \ to understand which Operation.Status indicate an\nOperation is successful\
            \ and should affect an Account.\n"
          type: boolean
      required:
      - status
      - successful
      type: object
    Timestamp:
      description: |
        The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in
        milliseconds because some blockchains produce blocks more often than once a second.
      example: 1582833600000
      format: int64
      minimum: 0
      type: integer
    PublicKey:
      description: |
        PublicKey contains a public key byte array
        for a particular CurveType encoded in hex.

        Note that there is no PrivateKey struct as this
        is NEVER the concern of an implementation.
      example:
        curve_type: null
        hex_bytes: hex_bytes
      properties:
        hex_bytes:
          description: |
            Hex-encoded public key bytes in the format
            specified by the CurveType.
          type: string
        curve_type:
          $ref: '#/components/schemas/CurveType'
      required:
      - curve_type
      - hex_bytes
      type: object
    CurveType:
      description: "CurveType is the type of cryptographic curve associated with a\
        \ PublicKey.\n\n* secp256k1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3)\n\
        * secp256r1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3)\n\
        * edwards25519: `y (255-bits) || x-sign-bit (1-bit)` - `32 bytes` (https://ed25519.cr.yp.to/ed25519-20110926.pdf)\n\
        * tweedle: 1st pk : Fq.t (32 bytes) || 2nd pk : Fq.t (32 bytes) (https://github.com/CodaProtocol/coda/blob/develop/rfcs/0038-rosetta-construction-api.md#marshal-keys)\n\
        * pallas: `x (255 bits) || y-parity-bit (1-bit) - 32 bytes` (https://github.com/zcash/pasta)\n"
      enum:
      - secp256k1
      - secp256r1
      - edwards25519
      - tweedle
      - pallas
      type: string
    SigningPayload:
      description: |
        SigningPayload is signed by the client with the keypair associated
        with an AccountIdentifier using the specified SignatureType.

        SignatureType can be optionally populated if there is
        a restriction on the signature scheme that can be
        used to sign the payload.
      example:
        address: address
        account_identifier:
          metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        hex_bytes: hex_bytes
        signature_type: null
      properties:
        address:
          description: "[DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific\
            \ address of the account that should sign\nthe payload.\n"
          type: string
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        hex_bytes:
          description: |
            Hex-encoded string of the payload bytes.
          type: string
        signature_type:
          $ref: '#/components/schemas/SignatureType'
      required:
      - hex_bytes
      type: object
    Signature:
      description: "Signature contains the payload that was signed, the public keys\
        \ of the\nkeypairs used to produce the signature, the signature (encoded in\
        \ hex),\nand the SignatureType.\n\nPublicKey is often times not known during\
        \ construction of the signing payloads\nbut may be needed to combine signatures\
        \ properly.\n"
      example:
        public_key:
          curve_type: null
          hex_bytes: hex_bytes
        signing_payload:
          address: address
          account_identifier:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          hex_bytes: hex_bytes
          signature_type: null
        hex_bytes: hex_bytes
        signature_type: null
      properties:
        signing_payload:
          $ref: '#/components/schemas/SigningPayload'
        public_key:
          $ref: '#/components/schemas/PublicKey'
        signature_type:
          $ref: '#/components/schemas/SignatureType'
        hex_bytes:
          type: string
      required:
      - hex_bytes
      - public_key
      - signature_type
      - signing_payload
      type: object
    SignatureType:
      description: "SignatureType is the type of a cryptographic signature.\n\n* ecdsa:\
        \ `r (32-bytes) || s (32-bytes)` - `64 bytes`\n* ecdsa_recovery: `r (32-bytes)\
        \ || s (32-bytes) || v (1-byte)` - `65 bytes`\n* ed25519: `R (32-byte) ||\
        \ s (32-bytes)` - `64 bytes`\n* schnorr_1: `r (32-bytes) || s (32-bytes)`\
        \ - `64 bytes`  (schnorr signature implemented by Zilliqa where both `r` and\
        \ `s` are scalars encoded as `32-bytes` values, most significant byte first.)\n\
        * schnorr_poseidon: `r (32-bytes) || s (32-bytes)` where s = Hash(1st pk ||\
        \ 2nd pk || r) - `64 bytes`  (schnorr signature w/ Poseidon hash function\
        \ implemented by O(1) Labs where both `r` and `s` are scalars encoded as `32-bytes`\
        \ values, least significant byte first. https://github.com/CodaProtocol/signer-reference/blob/master/schnorr.ml\
        \ )\n"
      enum:
      - ecdsa
      - ecdsa_recovery
      - ed25519
      - schnorr_1
      - schnorr_poseidon
      type: string
    CoinAction:
      description: "CoinActions are different state changes that a Coin can\nundergo.\
        \ When a Coin is created, it is coin_created. When a Coin is\nspent, it is\
        \ coin_spent. It is assumed that a single Coin\ncannot be created or spent\
        \ more than once.\n"
      enum:
      - coin_created
      - coin_spent
      type: string
    CoinIdentifier:
      description: |
        CoinIdentifier uniquely identifies a Coin.
      example:
        identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
      properties:
        identifier:
          description: "Identifier should be populated with a globally unique identifier\n\
            of a Coin. In Bitcoin, this identifier would be transaction_hash:index.\n"
          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          type: string
      required:
      - identifier
      type: object
    CoinChange:
      description: "CoinChange is used to represent a change in state of\na some coin\
        \ identified by a coin_identifier. This object\nis part of the Operation model\
        \ and must be populated for\nUTXO-based blockchains.\n\nCoincidentally, this\
        \ abstraction of UTXOs allows for supporting\nboth account-based transfers\
        \ and UTXO-based transfers on the\nsame blockchain (when a transfer is account-based,\
        \ don't\npopulate this model).\n"
      example:
        coin_identifier:
          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        coin_action: null
      properties:
        coin_identifier:
          $ref: '#/components/schemas/CoinIdentifier'
        coin_action:
          $ref: '#/components/schemas/CoinAction'
      required:
      - coin_action
      - coin_identifier
      type: object
    Coin:
      description: |
        Coin contains its unique identifier and the amount
        it represents.
      example:
        amount:
          metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        coin_identifier:
          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
      properties:
        coin_identifier:
          $ref: '#/components/schemas/CoinIdentifier'
        amount:
          $ref: '#/components/schemas/Amount'
      required:
      - amount
      - coin_identifier
      type: object
    BalanceExemption:
      description: "BalanceExemption indicates that the balance for an exempt account\
        \ could\nchange without a corresponding Operation. This typically occurs with\
        \ staking\nrewards, vesting balances, and Currencies with a dynamic supply.\n\
        \nCurrently, it is possible to exempt an account from strict reconciliation\n\
        by SubAccountIdentifier.Address or by Currency. This means that any account\n\
        with SubAccountIdentifier.Address would be exempt or any balance of a particular\n\
        Currency would be exempt, respectively.\n\nBalanceExemptions should be used\
        \ sparingly as they may\nintroduce significant complexity for integrators\
        \ that attempt\nto reconcile all account balance changes.\n\nIf your implementation\
        \ relies on any BalanceExemptions, you MUST implement\nhistorical balance\
        \ lookup (the ability to query an account balance at any\nBlockIdentifier).\n"
      example:
        sub_account_address: staking
        currency:
          symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        exemption_type: null
      properties:
        sub_account_address:
          description: |
            SubAccountAddress is the SubAccountIdentifier.Address that the
            BalanceExemption applies to (regardless of the value of
            SubAccountIdentifier.Metadata).
          example: staking
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        exemption_type:
          $ref: '#/components/schemas/ExemptionType'
      type: object
    ExemptionType:
      description: "ExemptionType is used to indicate if the live balance for an\n\
        account subject to a BalanceExemption could increase above,\ndecrease below,\
        \ or equal the computed balance.\n\n* greater_or_equal: The live balance may\
        \ increase above or equal the computed balance. This typically\n  occurs with\
        \ staking rewards that accrue on each block.\n* less_or_equal: The live balance\
        \ may decrease below or equal the computed balance. This typically\n  occurs\
        \ as balance moves from locked to spendable on a vesting account.\n* dynamic:\
        \ The live balance may increase above, decrease below, or equal the computed\
        \ balance. This\n  typically occurs with tokens that have a dynamic supply.\n"
      enum:
      - greater_or_equal
      - less_or_equal
      - dynamic
      type: string
    BlockEvent:
      description: |
        BlockEvent represents the addition or removal of a BlockIdentifier
        from storage. Streaming BlockEvents allows lightweight clients to
        update their own state without needing to implement their own syncing logic.
      example:
        sequence: 5
        type: null
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        sequence:
          description: |
            sequence is the unique identifier of a BlockEvent
            within the context of a NetworkIdentifier.
          example: 5
          format: int64
          minimum: 0
          type: integer
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        type:
          $ref: '#/components/schemas/BlockEventType'
      required:
      - block_identifier
      - sequence
      - type
      type: object
    BlockEventType:
      description: |
        BlockEventType determines if a BlockEvent represents the
        addition or removal of a block.
      enum:
      - block_added
      - block_removed
      type: string
    Operator:
      description: "Operator is used by query-related endpoints\nto determine how\
        \ to apply conditions.\n\nIf this field is not populated, the default\n`and`\
        \ value will be used.\n"
      enum:
      - or
      - and
      type: string
    BlockTransaction:
      description: |
        BlockTransaction contains a populated Transaction
        and the BlockIdentifier that contains it.
      example:
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          related_transactions:
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        transaction:
          $ref: '#/components/schemas/Transaction'
      required:
      - block_identifier
      - transaction
      type: object
    RelatedTransaction:
      description: |
        The related_transaction allows implementations to link together multiple transactions.
        An unpopulated network identifier indicates that the related transaction is on the same network.
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        direction: null
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        direction:
          $ref: '#/components/schemas/Direction'
      required:
      - direction
      - transaction_identifier
      type: object
    Direction:
      description: |
        Used by RelatedTransaction to indicate the direction of the relation (i.e. cross-shard/cross-network sends may
        reference `backward` to an earlier transaction and async execution may reference `forward`). Can be used to indicate if
        a transaction relation is from child to parent or the reverse.
      enum:
      - forward
      - backward
      type: string
    Case:
      default: case_sensitive
      description: |
        Case specifies the expected case for strings and hashes.
      enum:
      - upper_case
      - lower_case
      - case_sensitive
      - null
      nullable: true
      type: string
    AccountBalanceRequest:
      description: "An AccountBalanceRequest is utilized to make a balance request\n\
        on the /account/balance endpoint. If the block_identifier is populated,\n\
        a historical balance query should be performed.\n"
      example:
        account_identifier:
          metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        currencies:
        - symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        - symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
        currencies:
          description: "In some cases, the caller may not want to retrieve all available\n\
            balances for an AccountIdentifier. If the currencies field\nis populated,\
            \ only balances for the specified currencies\nwill be returned. If not\
            \ populated, all available balances\nwill be returned.\n"
          items:
            $ref: '#/components/schemas/Currency'
          type: array
      required:
      - account_identifier
      - network_identifier
      type: object
    AccountBalanceResponse:
      description: "An AccountBalanceResponse is returned on the /account/balance\
        \ endpoint.\nIf an account has a balance for each AccountIdentifier describing\
        \ it\n(ex: an ERC-20 token balance on a few smart contracts), an account\n\
        balance request must be made with each AccountIdentifier.\n\nThe `coins` field\
        \ was removed and replaced by by `/account/coins` in `v1.4.7`.\n"
      example:
        balances:
        - metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        - metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        metadata:
          sequence_number: 23
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        balances:
          description: |
            A single account may have a balance in multiple currencies.
          items:
            $ref: '#/components/schemas/Amount'
          type: array
        metadata:
          description: |
            Account-based blockchains that utilize a nonce or sequence number
            should include that number in the metadata. This number could be
            unique to the identifier or global across the account address.
          example:
            sequence_number: 23
          type: object
      required:
      - balances
      - block_identifier
      type: object
    AccountCoinsRequest:
      description: |
        AccountCoinsRequest is utilized to make a request on the /account/coins
        endpoint.
      example:
        account_identifier:
          metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        include_mempool: true
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        currencies:
        - symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        - symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        include_mempool:
          description: "Include state from the mempool when looking up an account's\n\
            unspent coins. Note, using this functionality\nbreaks any guarantee of\
            \ idempotency.\n"
          type: boolean
        currencies:
          description: "In some cases, the caller may not want to retrieve coins for\
            \ all\ncurrencies for an AccountIdentifier. If the currencies field\n\
            is populated, only coins for the specified currencies\nwill be returned.\
            \ If not populated, all unspent coins\nwill be returned.\n"
          items:
            $ref: '#/components/schemas/Currency'
          type: array
      required:
      - account_identifier
      - include_mempool
      - network_identifier
      type: object
    AccountCoinsResponse:
      description: |
        AccountCoinsResponse is returned on the /account/coins endpoint and includes
        all unspent Coins owned by an AccountIdentifier.
      example:
        metadata:
          sequence_number: 23
        coins:
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          coin_identifier:
            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          coin_identifier:
            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        coins:
          description: "If a blockchain is UTXO-based, all unspent Coins owned by\
            \ an account_identifier\nshould be returned alongside the balance. It\
            \ is highly recommended to\npopulate this field so that users of the Rosetta\
            \ API implementation\ndon't need to maintain their own indexer to track\
            \ their UTXOs.\n"
          items:
            $ref: '#/components/schemas/Coin'
          type: array
        metadata:
          description: |
            Account-based blockchains that utilize a nonce or sequence number
            should include that number in the metadata. This number could be
            unique to the identifier or global across the account address.
          example:
            sequence_number: 23
          type: object
      required:
      - block_identifier
      - coins
      type: object
    BlockRequest:
      description: |
        A BlockRequest is utilized to make a block request on the
        /block endpoint.
      example:
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
      required:
      - block_identifier
      - network_identifier
      type: object
    BlockResponse:
      description: "A BlockResponse includes a fully-populated block or a partially-populated\n\
        block with a list of other transactions to fetch (other_transactions).\n\n\
        As a result of the consensus algorithm of some blockchains, blocks\ncan be\
        \ omitted (i.e. certain block indices can be skipped). If a query\nfor one\
        \ of these omitted indices is made, the response should not include\na `Block`\
        \ object.\n\nIt is VERY important to note that blocks MUST still form a canonical,\n\
        connected chain of blocks where each block has a unique index. In other words,\n\
        the `PartialBlockIdentifier` of a block after an omitted block should\nreference\
        \ the last non-omitted block.\n"
      example:
        block:
          metadata:
            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
            difficulty: "123891724987128947"
          parent_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          transactions:
          - metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            related_transactions:
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
          - metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            related_transactions:
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          timestamp: 1582833600000
        other_transactions:
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        block:
          $ref: '#/components/schemas/Block'
        other_transactions:
          description: "Some blockchains may require additional transactions to be\
            \ fetched\nthat weren't returned in the block response\n(ex: block only\
            \ returns transaction hashes). For blockchains with a\nlot of transactions\
            \ in each block, this\ncan be very useful as consumers can concurrently\
            \ fetch all\ntransactions returned.\n"
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
          type: array
      type: object
    BlockTransactionRequest:
      description: |
        A BlockTransactionRequest is used to fetch a Transaction included in a
        block that is not returned in a BlockResponse.
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      required:
      - block_identifier
      - network_identifier
      - transaction_identifier
      type: object
    BlockTransactionResponse:
      description: |
        A BlockTransactionResponse contains information about a block transaction.
      example:
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          related_transactions:
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
      required:
      - transaction
      type: object
    MempoolResponse:
      description: |
        A MempoolResponse contains all transaction identifiers in the mempool
        for a particular network_identifier.
      example:
        transaction_identifiers:
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifiers:
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
          type: array
      required:
      - transaction_identifiers
      type: object
    MempoolTransactionRequest:
      description: |
        A MempoolTransactionRequest is utilized to retrieve a transaction
        from the mempool.
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      required:
      - network_identifier
      - transaction_identifier
      type: object
    MempoolTransactionResponse:
      description: "A MempoolTransactionResponse contains an estimate of a mempool\n\
        transaction. It may not be possible to know the full impact of\na transaction\
        \ in the mempool (ex: fee paid).\n"
      example:
        metadata:
          descendant_fees: 123923
          ancestor_count: 2
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          - amount:
              metadata: "{}"
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 1
            - index: 2
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              coin_action: null
            account:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 5
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          related_transactions:
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
          - transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            network_identifier:
              blockchain: bitcoin
              sub_network_identifier:
                metadata:
                  producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                network: shard 1
              network: mainnet
            direction: null
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        metadata:
          example:
            descendant_fees: 123923
            ancestor_count: 2
          type: object
      required:
      - transaction
      type: object
    MetadataRequest:
      description: |
        A MetadataRequest is utilized in any request where
        the only argument is optional metadata.
      example:
        metadata: "{}"
      properties:
        metadata:
          type: object
      type: object
    NetworkListResponse:
      description: |
        A NetworkListResponse contains all NetworkIdentifiers
        that the node can serve information for.
      example:
        network_identifiers:
        - blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        - blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifiers:
          items:
            $ref: '#/components/schemas/NetworkIdentifier'
          type: array
      required:
      - network_identifiers
      type: object
    NetworkRequest:
      description: |
        A NetworkRequest is utilized to retrieve some data specific exclusively
        to a NetworkIdentifier.
      example:
        metadata: "{}"
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        metadata:
          type: object
      required:
      - network_identifier
      type: object
    NetworkStatusResponse:
      description: "NetworkStatusResponse contains basic information about the node's\n\
        view of a blockchain network. It is assumed that any BlockIdentifier.Index\n\
        less than or equal to CurrentBlockIdentifier.Index can be queried.\n\nIf a\
        \ Rosetta implementation prunes historical state, it should\npopulate the\
        \ optional `oldest_block_identifier` field with the\noldest block available\
        \ to query. If this is not populated,\nit is assumed that the `genesis_block_identifier`\
        \ is the oldest\nqueryable block.\n\nIf a Rosetta implementation performs\
        \ some pre-sync before it is\npossible to query blocks, sync_status should\
        \ be populated so that\nclients can still monitor healthiness. Without this\
        \ field, it may\nappear that the implementation is stuck syncing and needs\
        \ to be\nterminated.\n"
      example:
        oldest_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        current_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        peers:
        - metadata: "{}"
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        - metadata: "{}"
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        sync_status:
          target_index: 150
          synced: true
          stage: header sync
          current_index: 100
        current_block_timestamp: 1582833600000
        genesis_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        current_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        current_block_timestamp:
          description: |
            The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in
            milliseconds because some blockchains produce blocks more often than once a second.
          example: 1582833600000
          format: int64
          minimum: 0
          type: integer
        genesis_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        oldest_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        sync_status:
          $ref: '#/components/schemas/SyncStatus'
        peers:
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      required:
      - current_block_identifier
      - current_block_timestamp
      - genesis_block_identifier
      type: object
    NetworkOptionsResponse:
      description: "NetworkOptionsResponse contains information about the versioning\
        \ of the\nnode and the allowed operation statuses, operation types, and errors.\n"
      example:
        allow:
          balance_exemptions:
          - sub_account_address: staking
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            exemption_type: null
          - sub_account_address: staking
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            exemption_type: null
          mempool_coins: true
          operation_types:
          - TRANSFER
          - TRANSFER
          transaction_hash_case: null
          historical_balance_lookup: true
          operation_statuses:
          - status: SUCCESS
            successful: true
          - status: SUCCESS
            successful: true
          timestamp_start_index: 0
          call_methods:
          - eth_call
          - eth_call
          block_hash_case: null
          errors:
          - retriable: true
            code: 12
            description: This error is returned when the requested AccountIdentifier
              is improperly formatted.
            details:
              address: 0x1dcc4de8dec75d7aab85b567b6
              error: not base64
            message: Invalid account format
          - retriable: true
            code: 12
            description: This error is returned when the requested AccountIdentifier
              is improperly formatted.
            details:
              address: 0x1dcc4de8dec75d7aab85b567b6
              error: not base64
            message: Invalid account format
        version:
          metadata: "{}"
          rosetta_version: 1.2.5
          node_version: 1.0.2
          middleware_version: 0.2.7
      properties:
        version:
          $ref: '#/components/schemas/Version'
        allow:
          $ref: '#/components/schemas/Allow'
      required:
      - allow
      - version
      type: object
    ConstructionMetadataRequest:
      description: |
        A ConstructionMetadataRequest is utilized to get information required
        to construct a transaction.

        The Options object used to specify which metadata to return is left
        purposely unstructured to allow flexibility for implementers. Options
        is not required in the case that there is network-wide metadata of
        interest.
      example:
        options: "{}"
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        options:
          description: "Some blockchains require different metadata for different\
            \ types of\ntransaction construction (ex: delegation versus a transfer).\
            \ Instead\nof requiring a blockchain node to return all possible types\
            \ of\nmetadata for construction (which may require multiple node fetches),\n\
            the client can populate an options object to limit the metadata\nreturned\
            \ to only the subset required.\n"
          type: object
      required:
      - network_identifier
      type: object
    ConstructionMetadataResponse:
      description: "The ConstructionMetadataResponse returns network-specific metadata\n\
        used for transaction construction.\n\nOptionally, the implementer can return\
        \ the suggested fee associated\nwith the transaction being constructed. The\
        \ caller may use this info\nto adjust the intent of the transaction or to\
        \ create a transaction with\na different account that can pay the suggested\
        \ fee. Suggested fee is an array\nin case fee payment must occur in multiple\
        \ currencies.\n"
      example:
        metadata:
          account_sequence: 23
          recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        suggested_fee:
        - metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        - metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
      properties:
        metadata:
          example:
            account_sequence: 23
            recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
        suggested_fee:
          items:
            $ref: '#/components/schemas/Amount'
          type: array
      required:
      - metadata
      type: object
    ConstructionDeriveRequest:
      description: |
        ConstructionDeriveRequest is passed to the `/construction/derive`
        endpoint. Network is provided in the request because some blockchains
        have different address formats for different networks.
        Metadata is provided in the request because some blockchains
        allow for multiple address types (i.e. different address
        for validators vs normal accounts).
      example:
        public_key:
          curve_type: null
          hex_bytes: hex_bytes
        metadata: "{}"
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        public_key:
          $ref: '#/components/schemas/PublicKey'
        metadata:
          type: object
      required:
      - network_identifier
      - public_key
      type: object
    ConstructionDeriveResponse:
      description: |
        ConstructionDeriveResponse is returned by the `/construction/derive`
        endpoint.
      example:
        metadata: "{}"
        address: address
        account_identifier:
          metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        address:
          description: "[DEPRECATED by `account_identifier` in `v1.4.4`] Address in\
            \ network-specific format.\n"
          type: string
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        metadata:
          type: object
      type: object
    ConstructionPreprocessRequest:
      description: "ConstructionPreprocessRequest is passed to the `/construction/preprocess`\n\
        endpoint so that a Rosetta implementation can determine which\nmetadata it\
        \ needs to request for construction.\n\nMetadata provided in this object should\
        \ NEVER be a product\nof live data (i.e. the caller must follow some network-specific\n\
        data fetching strategy outside of the Construction API to populate\nrequired\
        \ Metadata). If live data is required for construction, it MUST\nbe fetched\
        \ in the call to `/construction/metadata`.\n\nThe caller can provide a max\
        \ fee they are willing\nto pay for a transaction. This is an array in the\
        \ case fees\nmust be paid in multiple currencies.\n\nThe caller can also provide\
        \ a suggested fee multiplier\nto indicate that the suggested fee should be\
        \ scaled.\nThis may be used to set higher fees for urgent transactions\nor\
        \ to pay lower fees when there is less urgency. It is assumed\nthat providing\
        \ a very low multiplier (like 0.0001) will\nnever lead to a transaction being\
        \ created with a fee\nless than the minimum network fee (if applicable).\n\
        \nIn the case that the caller provides both a max fee\nand a suggested fee\
        \ multiplier, the max fee will set an\nupper bound on the suggested fee (regardless\
        \ of the\nmultiplier provided).\n"
      example:
        metadata: "{}"
        operations:
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        suggested_fee_multiplier: 0.08008281904610115
        max_fee:
        - metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        - metadata: "{}"
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        metadata:
          type: object
        max_fee:
          items:
            $ref: '#/components/schemas/Amount'
          type: array
        suggested_fee_multiplier:
          format: double
          minimum: 0.0
          type: number
      required:
      - network_identifier
      - operations
      type: object
    ConstructionPreprocessResponse:
      description: "ConstructionPreprocessResponse contains `options` that will\n\
        be sent unmodified to `/construction/metadata`. If it is\nnot necessary to\
        \ make a request to `/construction/metadata`,\n`options` should be omitted.\
        \ \n\nSome blockchains require the PublicKey of particular AccountIdentifiers\n\
        to construct a valid transaction. To fetch these PublicKeys, populate\n`required_public_keys`\
        \ with the AccountIdentifiers associated with the desired\nPublicKeys. If\
        \ it is not necessary to retrieve any PublicKeys\nfor construction, `required_public_keys`\
        \ should be omitted.\n"
      example:
        options: "{}"
        required_public_keys:
        - metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        - metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        options:
          description: |
            The options that will be sent directly to `/construction/metadata` by
            the caller.
          type: object
        required_public_keys:
          items:
            $ref: '#/components/schemas/AccountIdentifier'
          type: array
      type: object
    ConstructionPayloadsRequest:
      description: "ConstructionPayloadsRequest is the request to\n`/construction/payloads`.\
        \ It contains the network,\na slice of operations, and arbitrary metadata\n\
        that was returned by the call to `/construction/metadata`.\n\nOptionally,\
        \ the request can also include an array\nof PublicKeys associated with the\
        \ AccountIdentifiers\nreturned in ConstructionPreprocessResponse.\n"
      example:
        public_keys:
        - curve_type: null
          hex_bytes: hex_bytes
        - curve_type: null
          hex_bytes: hex_bytes
        metadata: "{}"
        operations:
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        metadata:
          type: object
        public_keys:
          items:
            $ref: '#/components/schemas/PublicKey'
          type: array
      required:
      - network_identifier
      - operations
      type: object
    ConstructionPayloadsResponse:
      description: |
        ConstructionTransactionResponse is returned by `/construction/payloads`. It
        contains an unsigned transaction blob (that is usually needed to construct
        the a network transaction from a collection of signatures) and an
        array of payloads that must be signed by the caller.
      example:
        unsigned_transaction: unsigned_transaction
        payloads:
        - address: address
          account_identifier:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          hex_bytes: hex_bytes
          signature_type: null
        - address: address
          account_identifier:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          hex_bytes: hex_bytes
          signature_type: null
      properties:
        unsigned_transaction:
          type: string
        payloads:
          items:
            $ref: '#/components/schemas/SigningPayload'
          type: array
      required:
      - payloads
      - unsigned_transaction
      type: object
    ConstructionCombineRequest:
      description: |
        ConstructionCombineRequest is the input to the `/construction/combine`
        endpoint. It contains the unsigned transaction blob returned by
        `/construction/payloads` and all required signatures to create
        a network transaction.
      example:
        unsigned_transaction: unsigned_transaction
        signatures:
        - public_key:
            curve_type: null
            hex_bytes: hex_bytes
          signing_payload:
            address: address
            account_identifier:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            hex_bytes: hex_bytes
            signature_type: null
          hex_bytes: hex_bytes
          signature_type: null
        - public_key:
            curve_type: null
            hex_bytes: hex_bytes
          signing_payload:
            address: address
            account_identifier:
              metadata: "{}"
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: "{}"
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            hex_bytes: hex_bytes
            signature_type: null
          hex_bytes: hex_bytes
          signature_type: null
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        unsigned_transaction:
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
      required:
      - network_identifier
      - signatures
      - unsigned_transaction
      type: object
    ConstructionCombineResponse:
      description: |
        ConstructionCombineResponse is returned by `/construction/combine`.
        The network payload will be sent directly to the
        `construction/submit` endpoint.
      example:
        signed_transaction: signed_transaction
      properties:
        signed_transaction:
          type: string
      required:
      - signed_transaction
      type: object
    ConstructionParseRequest:
      description: |
        ConstructionParseRequest is the input to the `/construction/parse`
        endpoint. It allows the caller to parse either an unsigned or
        signed transaction.
      example:
        signed: true
        transaction: transaction
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed:
          description: |
            Signed is a boolean indicating whether the transaction is signed.
          type: boolean
        transaction:
          description: |
            This must be either the unsigned transaction blob returned by
            `/construction/payloads` or the signed transaction blob
            returned by `/construction/combine`.
          type: string
      required:
      - network_identifier
      - signed
      - transaction
      type: object
    ConstructionParseResponse:
      description: |
        ConstructionParseResponse contains an array of operations that occur in
        a transaction blob. This should match the array of operations provided
        to `/construction/preprocess` and `/construction/payloads`.
      example:
        signers:
        - signers
        - signers
        metadata: "{}"
        operations:
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        - amount:
            metadata: "{}"
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 1
          - index: 2
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            coin_action: null
          account:
            metadata: "{}"
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: "{}"
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 5
            network_index: 0
          status: Reverted
        account_identifier_signers:
        - metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        - metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        signers:
          description: "[DEPRECATED by `account_identifier_signers` in `v1.4.4`] All\
            \ signers (addresses) of a particular transaction. If the transaction\n\
            is unsigned, it should be empty.\n"
          items:
            type: string
          type: array
        account_identifier_signers:
          items:
            $ref: '#/components/schemas/AccountIdentifier'
          type: array
        metadata:
          type: object
      required:
      - operations
      type: object
    ConstructionHashRequest:
      description: |
        ConstructionHashRequest is the input to the `/construction/hash` endpoint.
      example:
        signed_transaction: signed_transaction
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed_transaction:
          type: string
      required:
      - network_identifier
      - signed_transaction
      type: object
    ConstructionSubmitRequest:
      description: |
        The transaction submission request includes a signed transaction.
      example:
        signed_transaction: signed_transaction
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed_transaction:
          type: string
      required:
      - network_identifier
      - signed_transaction
      type: object
    TransactionIdentifierResponse:
      description: |
        TransactionIdentifierResponse contains the transaction_identifier of a
        transaction that was submitted to either `/construction/hash` or
        `/construction/submit`.
      example:
        metadata: "{}"
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        metadata:
          type: object
      required:
      - transaction_identifier
      type: object
    CallRequest:
      description: |
        CallRequest is the input to the `/call` endpoint.
      example:
        method: eth_call
        parameters:
          block_number: 23
          address: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        method:
          description: "Method is some network-specific procedure call. This method\
            \ could\nmap to a network-specific RPC endpoint, a method in an SDK generated\n\
            from a smart contract, or some hybrid of the two.\n\nThe implementation\
            \ must define all available methods in the\nAllow object. However, it\
            \ is up to the caller to determine\nwhich parameters to provide when invoking\
            \ `/call`.\n"
          example: eth_call
          type: string
        parameters:
          description: |
            Parameters is some network-specific argument for a method. It is
            up to the caller to determine which parameters to provide when invoking
            `/call`.
          example:
            block_number: 23
            address: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - method
      - network_identifier
      - parameters
      type: object
    CallResponse:
      description: |
        CallResponse contains the result of a `/call` invocation.
      example:
        result:
          count: 1000
        idempotent: true
      properties:
        result:
          description: |
            Result contains the result of the `/call` invocation. This result
            will not be inspected or interpreted by Rosetta tooling and is
            left to the caller to decode.
          example:
            count: 1000
          type: object
        idempotent:
          description: "Idempotent indicates that if `/call` is invoked with the same\n\
            CallRequest again, at any point in time, it will return the same\nCallResponse.\n\
            \nIntegrators may cache the CallResponse if this is set to true\nto avoid\
            \ making unnecessary calls to the Rosetta implementation. For\nthis reason,\
            \ implementers should be very conservative about returning\ntrue here\
            \ or they could cause issues for the caller.\n"
          type: boolean
      required:
      - idempotent
      - result
      type: object
    EventsBlocksRequest:
      description: |
        EventsBlocksRequest is utilized to fetch a sequence of BlockEvents
        indicating which blocks were added and removed from storage to
        reach the current state.
      example:
        offset: 5
        limit: 5
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        offset:
          description: "offset is the offset into the event stream to sync events\
            \ from. If this\nfield is not populated, we return the limit events backwards\
            \ from tip.\nIf this is set to 0, we start from the beginning.\n"
          example: 5
          format: int64
          minimum: 0
          type: integer
        limit:
          description: |
            limit is the maximum number of events to fetch in one call. The implementation
            may return <= limit events.
          example: 5
          format: int64
          minimum: 0
          type: integer
      required:
      - network_identifier
      type: object
    EventsBlocksResponse:
      description: |
        EventsBlocksResponse contains an ordered collection of BlockEvents
        and the max retrievable sequence.
      example:
        max_sequence: 5
        events:
        - sequence: 5
          type: null
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        - sequence: 5
          type: null
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        max_sequence:
          description: |
            max_sequence is the maximum available sequence number to fetch.
          example: 5
          format: int64
          minimum: 0
          type: integer
        events:
          description: |
            events is an array of BlockEvents indicating the order to add
            and remove blocks to maintain a canonical view of blockchain
            state. Lightweight clients can use this event stream to update
            state without implementing their own block syncing logic.
          items:
            $ref: '#/components/schemas/BlockEvent'
          type: array
      required:
      - events
      - max_sequence
      type: object
    SearchTransactionsRequest:
      description: |
        SearchTransactionsRequest is used to search for transactions
        matching a set of provided conditions in canonical blocks.
      example:
        address: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
        offset: 5
        max_block: 5
        account_identifier:
          metadata: "{}"
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: "{}"
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        coin_identifier:
          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        type: transfer
        operator: null
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        success: true
        limit: 5
        currency:
          symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        status: reverted
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operator:
          $ref: '#/components/schemas/Operator'
        max_block:
          description: "max_block is the largest block index to consider when searching\n\
            for transactions. If this field is not populated, the current\nblock is\
            \ considered the max_block.\n\nIf you do not specify a max_block, it is\
            \ possible a newly synced\nblock will interfere with paginated transaction\
            \ queries (as the offset\ncould become invalid with newly added rows).\n"
          example: 5
          format: int64
          minimum: 0
          type: integer
        offset:
          description: "offset is the offset into the query result to start returning\
            \ transactions.\n\nIf any search conditions are changed, the query offset\
            \ will change and you\nmust restart your search iteration.\n"
          example: 5
          format: int64
          minimum: 0
          type: integer
        limit:
          description: |
            limit is the maximum number of transactions to return in one call. The implementation
            may return <= limit transactions.
          example: 5
          format: int64
          minimum: 0
          type: integer
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        coin_identifier:
          $ref: '#/components/schemas/CoinIdentifier'
        currency:
          $ref: '#/components/schemas/Currency'
        status:
          description: |
            status is the network-specific operation type.
          example: reverted
          type: string
        type:
          description: |
            type is the network-specific operation type.
          example: transfer
          type: string
        address:
          description: "address is AccountIdentifier.Address. This is used to get\
            \ all\ntransactions related to an AccountIdentifier.Address, regardless\n\
            of SubAccountIdentifier.\n"
          example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          type: string
        success:
          description: |
            success is a synthetic condition populated by parsing network-specific
            operation statuses (using the mapping provided in `/network/options`).
          type: boolean
      required:
      - network_identifier
      type: object
    SearchTransactionsResponse:
      description: |
        SearchTransactionsResponse contains an ordered collection of BlockTransactions
        that match the query in SearchTransactionsRequest. These BlockTransactions
        are sorted from most recent block to oldest block.
      example:
        total_count: 5
        transactions:
        - transaction:
            metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            related_transactions:
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        - transaction:
            metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            - amount:
                metadata: "{}"
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 1
              - index: 2
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
                coin_action: null
              account:
                metadata: "{}"
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: "{}"
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 5
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
            related_transactions:
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
            - transaction_identifier:
                hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
              network_identifier:
                blockchain: bitcoin
                sub_network_identifier:
                  metadata:
                    producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
                  network: shard 1
                network: mainnet
              direction: null
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        next_offset: 5
      properties:
        transactions:
          description: "transactions is an array of BlockTransactions sorted by most\
            \ recent\nBlockIdentifier (meaning that transactions in recent blocks\
            \ appear\nfirst).\n\nIf there are many transactions for a particular search,\
            \ transactions\nmay not contain all matching transactions. It is up to\
            \ the caller to\npaginate these transactions using the max_block field.\n"
          items:
            $ref: '#/components/schemas/BlockTransaction'
          type: array
        total_count:
          description: |
            total_count is the number of results for a given search. Callers
            typically use this value to concurrently fetch results by offset
            or to display a virtual page number associated with results.
          example: 5
          format: int64
          minimum: 0
          type: integer
        next_offset:
          description: "next_offset is the next offset to use when paginating through\n\
            transaction results. If this field is not populated, there are\nno more\
            \ transactions to query.\n"
          example: 5
          format: int64
          minimum: 0
          type: integer
      required:
      - total_count
      - transactions
      type: object
    Error:
      description: "Instead of utilizing HTTP status codes to describe node errors\
        \ (which often\ndo not have a good analog), rich errors are returned using\
        \ this object.\n\nBoth the code and message fields can be individually used\
        \ to correctly\nidentify an error. Implementations MUST use unique values\
        \ for both\nfields.\n"
      example:
        retriable: true
        code: 12
        description: This error is returned when the requested AccountIdentifier is
          improperly formatted.
        details:
          address: 0x1dcc4de8dec75d7aab85b567b6
          error: not base64
        message: Invalid account format
      properties:
        code:
          description: "Code is a network-specific error code. If desired, this code\n\
            can be equivalent to an HTTP status code.\n"
          example: 12
          format: int32
          minimum: 0
          type: integer
        message:
          description: "Message is a network-specific error message.\n\nThe message\
            \ MUST NOT change for a given code. In particular, this\nmeans that any\
            \ contextual information should be included in\nthe details field.\n"
          example: Invalid account format
          type: string
        description:
          description: "Description allows the implementer to optionally provide additional\
            \ information\nabout an error. In many cases, the content of this field\
            \ will be a copy-and-paste\nfrom existing developer documentation.\n\n\
            Description can ONLY be populated with generic information about a particular\n\
            type of error. It MUST NOT be populated with information about a particular\n\
            instantiation of an error (use `details` for this).\n\nWhereas the content\
            \ of Error.Message should stay stable across releases, the\ncontent of\
            \ Error.Description will likely change across releases (as implementers\n\
            improve error documentation). For this reason, the content in this field\n\
            is not part of any type assertion (unlike Error.Message).\n"
          example: This error is returned when the requested AccountIdentifier is
            improperly formatted.
          type: string
        retriable:
          description: |
            An error is retriable if the same request may succeed if submitted
            again.
          type: boolean
        details:
          description: |
            Often times it is useful to return context specific
            to the request that caused the error (i.e. a sample of the
            stack trace or impacted account) in addition to the
            standard error message.
          example:
            address: 0x1dcc4de8dec75d7aab85b567b6
            error: not base64
          type: object
      required:
      - code
      - message
      - retriable
      type: object

