/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 *
 * Generated by: https://openapi-generator.tech
 */

/// `Currency` is composed of a canonical Symbol and Decimals. This Decimals value is used to
/// convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins).
#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct Currency {
    /// Canonical symbol associated with a currency.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Number of decimal places in the standard unit representation of the amount.  For example,
    /// BTC has 8 decimals. Note that it is not possible to represent the value of some currency in
    /// atomic units that is not base 10.
    #[serde(rename = "decimals")]
    pub decimals: u32,
    /// Any additional information related to the currency itself.  For example, it would be useful
    /// to populate this object with the contract address of an ERC-20 token.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}

impl Currency {
    /// `Currency` is composed of a canonical Symbol and Decimals. This Decimals value is used to
    /// convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins).
    #[must_use]
    pub const fn new(symbol: String, decimals: u32) -> Self {
        Self { symbol, decimals, metadata: None }
    }
}
